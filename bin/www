#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SmartLibraryWeb:server');
var http = require('http');
var net = require('net');
var later = require('later');
var fs = require('fs');
var config = require('../modules/config');

/**
 * Start camera folder cleaner.
 */
var cameraFolderCleanerSched = {
    schedules: [{
        m: [0, 10, 20, 30, 40, 50]
    }]
};
var cameraFolderCleaner = function(){
    console.log(new Date());
    console.log("Do the camera folder clean...");
    fs.readdir(config.common.cameraUploadDir, function (err, files) {
        if (err) return console.log(err);
        files.forEach(function (filename) {
            var stat = fs.statSync(url);
            if(stat.isFile()) fs.unlinkSync(config.common.cameraUploadDir + filename);
        });
    });
};
getValTimer = later.setInterval(cameraFolderCleaner, cameraFolderCleanerSched);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create Socket.io Server.
 */
var io = require('socket.io')(server);
var socket = require('../socket')(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
